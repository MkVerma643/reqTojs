"use strict";

function _instanceof(e, t) {
    return null != t && "undefined" != typeof Symbol && t[Symbol.hasInstance] ? !!t[Symbol.hasInstance](e) : e instanceof t
}

function _typeof(e) {
    return (_typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (e) {
        return typeof e
    } : function (e) {
        return e && "function" == typeof Symbol && e.constructor === Symbol && e !== Symbol.prototype ? "symbol" : typeof e
    })(e)
}

function _classCallCheck(e, t) {
    if (!_instanceof(e, t)) throw new TypeError("Cannot call a class as a function")
}

function _defineProperties(e, t) {
    for (var n = 0; n < t.length; n++) {
        var r = t[n];
        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r)
    }
}

function _createClass(e, t, n) {
    return t && _defineProperties(e.prototype, t), n && _defineProperties(e, n), e
}! function (e, t) {
    var n = function () {
        function e() {
            _classCallCheck(this, e), this.xhr = new XMLHttpRequest
        }
        return _createClass(e, [{
            key: "setHeaders",
            value: function (e, t) {
                if ("object" == _typeof(e) || "" == e)
                    for (var n in e) this.xhr.setRequestHeader(n, e[n]);
                1 == Array.isArray(e) && t(new Error("headers must be object, key and value pair"))
            }
        }, {
            key: "validationPostRequest",
            value: function (e, t) {
                e || t(new Error("Required URL"))
            }
        }, {
            key: "get",
            value: function (e) {
                var t = this,
                    n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                return new Promise(function (r, o) {
                    t.validationPostRequest(e, o), t.xhr.open("GET", e, !0), t.setHeaders(n, o), t.xhr.onload = function () {
                        var e;
                        400 == t.xhr.status && 4 == t.xhr.readyState && o(new Error("url Found")), 200 == t.xhr.status && 4 == t.xhr.readyState && (e = t.xhr.responseText, r(e))
                    }, t.xhr.send()
                })
            }
        }, {
            key: "post",
            value: function (e, t, n) {
                var r = this;
                return new Promise(function (o, s) {
                    r.validationPostRequest(e, s), r.xhr.open("POST", e, !0), r.setHeaders(n, s), r.xhr.onload = function () {
                        var e;
                        e = r.xhr.responseText, o(e)
                    }, r.xhr.send(JSON.stringify(t))
                })
            }
        }, {
            key: "put",
            value: function (e, t, n) {
                var r = this;
                return new Promise(function (o, s) {
                    r.validationPostRequest(e, s), r.xhr.open("PUT", e, !0), r.setHeaders(n, s), r.xhr.onload = function () {
                        var e;
                        e = r.xhr.responseText, o(e)
                    }, r.xhr.send(JSON.stringify(t))
                })
            }
        }, {
            key: "delete",
            value: function (e) {
                var t = this,
                    n = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
                return new Promise(function (r, o) {
                    t.validationPostRequest(e, o), t.xhr.open("DELETE", e, !0), t.setHeaders(n, o), t.xhr.onload = function () {
                        var e;
                        200 == t.xhr.status && 4 == t.xhr.readyState && (e = t.xhr.responseText, r(e))
                    }, t.xhr.send()
                })
            }
        }]), e
    }();
    e.reqto = e.reqTo = e.Reqto = new n
}(window, document);